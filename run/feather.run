# Feather

# Ragel is used to compile state machine into C.
requires_installation_of ragel

## Build

set build_components { feather core init drivers/timer drivers/nic }

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

## Config

append config {
<config verbose="yes">
        <parent-provides>
                <service name="ROM"/>
                <service name="LOG"/>
                <service name="CAP"/>
                <service name="RAM"/>
                <service name="RM"/>
                <service name="CPU"/>
                <service name="PD"/>
                <service name="IRQ"/>
                <service name="IO_PORT"/>
                <service name="IO_MEM"/>
                <service name="SIGNAL"/>
        </parent-provides>

        <default-route>
                <any-service> <parent/> <any-child/> </any-service>
        </default-route>

	<default caps="100" />

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="nic_drv" caps="130">
                <resource name="RAM" quantum="20M"/>
                <provides><service name="Nic"/></provides>
        </start>

        <start name="feather">
                <resource name="RAM" quantum="20M"/>
                <provides><service name="Feather"/></provides>
		<config ld_verbose="yes" >
			<libc stdout="/dev/log" stderr="/dev/log" />
                        <vfs>	<dir name="dev"> <log/> </dir>
				<tar name="websites.tar"/>
			</vfs>
		</config>
        </start>
}

append_platform_drv_config

append config {
</config>
}

install_config $config

## Boot image

set boot_modules {
	core init feather lwip_legacy.lib.so vfs.lib.so libm.lib.so libc.lib.so \
	ld.lib.so timer nic_drv posix.lib.so 			    		\
	websites.tar
}

# platform-specific modules
append_platform_drv_boot_modules

build_boot_image $boot_modules

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "

append qemu_args " -net user -redir tcp:5555::80 "
append qemu_args " -nographic -serial mon:stdio "


run_genode_until forever
